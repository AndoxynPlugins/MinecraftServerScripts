#!/bin/bash
#  mc - Minecraft Server Script
#
# ### License ###
#
# Copyright 2013 Dabo Ross
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ### TODO ###
# * Grab PID and fix server_running
# * Make a unified storage file to store PID and fix server_running.

### Configuration ###

# Name of the script - to have unique scripts
declare -r NAME="mcserver"

# Server directory - where the minecraft server is stored
declare -r SERVER_DIR="$HOME/server"

# XMX and XMS
declare -r XMX="1G"
declare -r XMS="$XMX"

# Set THIS to be this script.
declare -r SCRIPT="$([[ $0 = /* ]] && echo "$0" || echo "$PWD/${0#./}")"

### Script Functions ###

# Resumes the server session
resume() {
    tmux attach "${NAME}-server"
}

# Gets the current log file
# stdout - log file
get_log() {
    local -r LOG_DIR="${HOME}/${NAME}-logs"
    if [[ ! -d "$LOG_DIR" ]]; then
       if [[ -a "$LOG_DIR" ]]; then
           mv "$LOG_DIR" "${LOG_DIR}-bak"
        fi
        mkdir -p "$LOG_DIR"
    fi
    local -r LOG_FILE="${LOG_DIR}/$(date +%Y-%m-%d).log"
    touch "$LOG_FILE"
    echo "$LOG_FILE"
}

# Logs something to the log file
# $@ - Lines to log
log() {
    echo "$(date +'%Y/%m/%d %H:%M') [${1}] ${@:2}" >> "$(get_log)"
}

# Tests if the server is running
# stdout - true if running
server_running() {
    if [[ "$(pgrep -xu $(id -u) java)" ]]; then
        echo "true"
    fi
}

# Runs the server script
server_script() {
    if [[ "$(script_enabled)" ]]; then
        if [[ "$(server_running)" ]]; then
            log "server_script" "Server running"
        else
            log "server_script" "Restarting server"
            kill_server
            start_server
        fi
    else
        log "server_script" "Script disabled"
    fi
}

# Migrates the server.log file to
log_migrate() {
    local -r SERVER_LOG="${SERVER_DIR}/server.log"
    local -r ARCHIVE_DIR="${HOME}/logarchives/${NAME}"
    mkdir -p "$ARCHIVE_DIR"
    local -r CURRENT_DATE="$(date +%Y-%m-%d)"
    local ARCHIVE_FILE="$ARCHIVE_DIR/${CURRENT_DATE}.log.gz"
    if [[ -a "$ARCHIVE_FILE" ]]; then
        log "log_migrate" "${ARCHIVE_FILE} already exists"
        local FILE_NUM='1'
        ARCHIVE_FILE="${ARCHIVE_DIR}/${CURRENT_DATE}-${FILE_NUM}.log.gz"
        while [[ -a "$ARCHIVE_FILE" ]]; do
            FILE_NUM="$((FILE_NUM + 1))"
            ARCHIVE_FILE="$ARCHIVE_DIR/${CURRENT_DATE}-${FILE_NUM}.log.gz"
        done
    fi
    log "log_migrate" "Migrating log to $ARCHIVE_FILE"
    gzip -c "$SERVER_LOG" > "$ARCHIVE_FILE"
    > "$SERVER_LOG"
}

tell_server() {
    log "tell_server" "Running $@"
    tmux send-keys -t "${NAME}-server" "
$@
"
}

restart_warning_short() {
    log "restart_warning_short" "Starting"
    if [[ "$(server_running)" ]]; then
        tell_server 'say Warning! Restarting in 5 seconds!'
        sleep 1
        if [[ "$(server_running)" ]]; then
            tell_server 'say Warning! Restarting in 4 seconds!'
            sleep 1
            if [[ "$(server_running)" ]]; then
                tell_server 'say Warning! Restarting in 3 seconds!'
                sleep 1
                if [[ "$(server_running)" ]]; then
                    tell_server 'say Warning! Restarting in 2 seconds!'
                    sleep 1
                    if [[ "$(server_running)" ]]; then
                        tell_server 'say Warning! Restarting in 1 second!'
                        sleep 1
                    fi
                fi
            fi
        fi
    fi
    log "restart_warning_short" "Done"
}

backup() {
    log "mc_backup" "Starting"
    local -r LOG_FILE="$(get_log)"
    local -r BACKUP_LOCATION="file:///mnt/backup/$(whoami)-${NAME}"
    duplicity --no-encryption \
        --log-file="$LOG_FILE" \
        --name "${NAME}" \
        --archive-dir "/mnt/backup/archives" \
        --full-if-older-than 1W \
        "$HOME" "$BACKUP_LOCATION" &>> "$LOG_FILE"
    log "mc_backup" "Done"
}

backup_script() {
    log "backup_script" "Starting"
    disable_script
    restart_warning_long
    stop_server
    backup
    start_server
    log "backup_script" "Done"
}

boot() {
    log "mc-boot" "Running"
    start_server
}

get_current_version() {
    local -r JAR_FILE="$SERVER_DIR/jars/spigot.jar"
    local -r MC_VERSION="$(java -jar $JAR_FILE --version)"
    log "[mc-get-version] Current version is $MC_VERSION"
    echo "$VERSION"
}

get_latest_version() {
    local -r LATEST_VERSION="$(curl -s http://ci.md-5.net/job/Spigot/lastBuild/buildNumber)"
    log "[mc-latest-version] Latest build: $LATEST_VERSION"
    echo "git-Spigot-$LATEST_VERSION"
}

script_enabled() {
    if [[ ! -a "~/.${NAME}-script-disabled" ]]; then
        echo "true"
    fi
}

disable_script() {
    if [[ -a "$HOME/.${NAME}-script-disabled" ]]; then
        log "disable_script" "Script already disabled"
    else
        log "disable_script" "Disabling script"
        touch "$HOME/.${NAME}-script-disabled"
    fi
}

enable_script() {
    if [[ -a "$HOME/.${NAME}-script-disabled" ]]; then
        log "enable_script" "Enabling script"
        rm -f "$HOME/.${NAME}-script-disabled"
    else
        log "enable_script" "Script already enabled"
    fi
}

download_latest() {
    local -r CURRENT_VERSION="$(get_current_version)"
    local -r LATEST_VERSION="$(get_latest_version)"
    local -r NEW_JAR="$SERVER_DIR/jars/spigot.jar.new"
    local -r FINAL_JAR="$SERVER_DIR/jars/spigot.jar"
    local -r UPDATE_URL="http://ci.md-5.net/job/Spigot/lastSuccessfulBuild/artifact/Spigot-Server/target/spigot.jar"
    if [[ "$CURRENT_VERSION" != "$LATEST_VERSION" ]]; then
        log "download_latest" "Server outdated"
        log "download_latest" "Downloading..."
        wget "$UPDATE_URL" -O "$NEW_JAR"
        local IS_VALID_JAR="$(java -jar "$NEW_JAR" --version)"
        local ATTEMPTS=0
        until [[ "$IS_VALID_JAR" || "$ATTEMPTS" -gt "5" ]]; do
            rm -f "$NEW_JAR"
            log "download_latest" "Downloaded jar corrupt"
            log "download_latest" "Downloading..."
            wget "$UPDATE_URL" -O "$NEW_JAR"
            IS_VALID_JAR="`java -jar $HOME/jars/spigot.jar.new --version`"
            ATTEMPTS="$((ATTEMPTS + 1))"
        done
        if [[ "$IS_VALID_JAR" ]]; then
            log "download_latest" "Download successful"
            log "download_latest" "Deploying"
            if [[ -a "$FINAL_JAR" ]]; then
                rm -f "$FINAL_JAR"
            fi
            mv -f "$NEW_JAR" "$FINAL_JAR"
        else
            log "download_latest" "Downloaded 5 corrupt jars"
            log "download_latest" "Giving up"
            rm -f "$NEW_JAR"
        fi
    else
        log "download_latest" "Server up to date"
    fi
}

pre_start_actions() {
    log "pre_start_actions" "Starting"
    download_latest
    log "pre_start_actions" "Done"
}

# Kills the server
kill_server() {
    log "[kill_server] Starting"
    killall -u "$(whoami)" -9 java
    if [[ -a "$SERVER_DIR/server.log.lck" ]]; then
        rm -f "$SERVER_DIR/server.log.lck"
    fi
    log "[kill_server] Done"
}

# Waits until the server is no longer running, then starts it.
persistent_start() {
    log "[persistent_start] Starting"
    disable_script
    while [[ "$(server_running)" ]]; do
        mc "[persistent_start] Server already running"
        sleep 1s
    done
    log "[persistent_start] Starting server"
    pre_start_actions
    tmux new -ds "${NAME}-server" "$SCRIPT internal_start"
    enable_script
}

# Kills the server then starts it
kill_start() {
    log "[kill_start] Starting"
    kill_server
    while [[ "$(server_running)" ]]; do
        sleep 1
    done
    start_server
    log "[kill_start] Done"
    resume
}

# Starts the server!
start_server() {
    if [[ "$(server_running)" ]]; then
        log "[start_server] Server already running"
    else
        log "[start_server] Starting server"
        pre_start_actions
        tmux new -ds "${NAME}-server" "$SCRIPT internal_start"
        enable_script
    fi
}

# Spigot
spigot_restart() {
    tmux new -ds "${NAME}-restart" "$SCRIPT persistent_start"
}

# Internally used start function
internal_start() {
    local -r JAR_FILE="$SERVER_DIR/jars/spigot.jar"
    log "internal_start" "Running with jar ${JAR_FILE}, xms ${XMS}, xmx ${XMX}"
    cd "$SERVER_DIR"
    java "-Xms${XMS}" "-Xmx${XMX}" -Xincgc -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=64m -jar "$JAR_FILE" --log-strip-color
    log "internal_start" "Done"
}

# Stops the server
stop_server() {
    if [[ "$(server_running)" ]]; then
        log "stop_server" "Stopping server"
        tell_server "kickall Server is restarting"
        tell_server "stop"
        timeout="$((120 + $(date '+%s')))"
        while [[ "$(server_running)" ]]; do
            if [[ "$(date '+%s')" -gt "$timeout" ]]; then
                kill_server
            fi
            sleep 1s
        done
    else
        log "stop_server" "Server not running"
    fi
}

# Stops the server, then starts it
stop_start() {
    log "stop_start" "Starting"
    disable_script
    restart_warning_short
    stop_server
    start_server
    log "stop_start" "Done"
}

# Views the log file with 'tail'
view_log() {
    local LENGTH="$1"
    if [[ -z "$LENGTH" ]]; then
        LENGTH="100"
    fi
    tail -n "$LENGTH" "$(get_log)"
}
